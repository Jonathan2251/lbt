# Thanks .c .cb Vranish (https://spin.a.cmi.cbject..cm/2016/08/26/makefile-c-p.cjects/)

# CPU and endian passed from command line, such as "make CPU=cpu032I endian=el"
#CPU := cpu032II
#endian :=

TARGET_LIB := libFloat.a
BUILD_DIR := ./build
TARGET := $(BUILD_DIR)/$(TARGET_LIB)
SRC_DIR := ./builtins

TOOLDIR := ~/llvm/test/build/bin
CC := ~/llvm/debug/build/bin/clang
LLC := $(TOOLDIR)/llc
AR := $(TOOLDIR)/llvm-ar

SRCS := absvdi2.c absvsi2.c absvti2.c adddf3.c addsf3.c addtf3.c addvdi3.c \
  addvsi3.c addvti3.c ashldi3.c ashlti3.c ashrdi3.c \
  ashrti3.c clear_cache.c clzdi2.c clzsi2.c clzti2.c cmpdi2.c cmpti2.c \
  comparedf2.c comparesf2.c ctzdi2.c ctzsi2.c ctzti2.c divdf3.c \
  divdi3.c divmoddi4.c divmodsi4.c divsf3.c divsi3.c divti3.c divtf3.c \
  extendsfdf2.c ffsdi2.c ffsti2.c \
  fixdfdi.c fixdfsi.c fixdfti.c fixsfdi.c fixsfsi.c fixsfti.c fixunsdfdi.c \
  fixunsdfsi.c fixunsdfti.c fixunssfdi.c fixunssfsi.c fixunssfti.c \
  fixunsxfdi.c fixunsxfsi.c fixunsxfti.c fixxfdi.c fixxfti.c floatundidf.c \
  floatdisf.c floatdixf.c floatsidf.c floatsisf.c floattidf.c floattisf.c \
  floattixf.c floatundisf.c floatundixf.c floatunsidf.c \
  floatunsisf.c floatuntidf.c floatuntisf.c floatuntixf.c \
  int_util.c lshrdi3.c lshrti3.c moddi3.c \
  modsi3.c modti3.c muldc3.c muldf3.c muldi3.c mulodi4.c mulosi4.c \
  muloti4.c mulsc3.c mulsf3.c multi3.c multf3.c mulvdi3.c mulvsi3.c \
  mulvti3.c mulxc3.c negdf2.c negdi2.c negsf2.c negti2.c negvdi2.c \
  negvsi2.c negvti2.c paritydi2.c paritysi2.c parityti2.c \
  popcountdi2.c popcountsi2.c popcountti2.c powidf2.c \
  powisf2.c powitf2.c powixf2.c subdf3.c subsf3.c subvdi3.c \
  subvsi3.c subvti3.c subtf3.c trampoline_setup.c truncdfsf2.c \
  ucmpdi2.c ucmpti2.c udivdi3.c udivmoddi4.c udivmodsi4.c udivmodti4.c \
  udivsi3.c udivti3.c umoddi3.c umodsi3.c umodti3.c

# String substitution for every C file.
# As an example, absvdi2.c turns into ./builtins/absvdi2.c
SRCS := $(SRCS:%=$(SRC_DIR)/%)

# String substitution for every C/C++ file.
# As an example, absvdi2.c turns into ./build/absvdi2.c.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/absvdi2.c.o turns in.c ./build/absvdi2.c.d
DEPS := $(OBJS:.o=.d)

# Every folder in ./src will need to be passed to GCC so that it can find header files
INC_DIRS := $(shell find $(SRC_DIR) -type d) ../../libc/avr-libc-1.8.1/include
# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
CPPFLAGS := $(INC_FLAGS) -MMD -MP -target mips-unknown-linux-gnu -emit-llvm

LLFLAGS := -march=cpu0${endian} -mcpu=${CPU} -relocation-model=static \
  -filetype=obj -has-lld=true

# The final build step.
$(TARGET): $(OBJS)
	$(AR) -rcs $@ $(OBJS)

# Build step for C source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
	$(LLC) $(LLFLAGS) $@ -o $@

.PHONY: clean
clean:
	rm -rf $(BUILD_DIR)

# Include the .d makefiles. The - at the f.cnt suppresses the er.crs.cf missing
# Makefiles. Initially, all the .d files will be missing, and we .cn't want t.cse
# er.crs .c s.cw up.
-include $(DEPS)
